Objectives:
  - "Allow mounting of PHP sites within as any other Express/Connect middleware."
  - "Similar to https://github.com/ddprrt/connect-php but focuses only on PHP-FPM."

Features:
  - "Use prototype.router method to include the PHP-FPM middleware router in parent app."
  - "Use 'connect-modrewrite' to parse any found .htaccess files."
  - "Use 'connect-timeout' that does not exceed the PHP-FPM timeout."
  - "Use 'serve-static' module to serve all non-executable/non-PHP files in webRoot path."
  - "Use temp module to create a temporary directory for each Node.js instance. The temp directory should be removed when instance dies."
  - "Use 'which' module to verify that php-fpm is installed and to get fully path to be used for spawn."
  - "Before spawning php-fpm, generate and write php.ini and php-fpm.conf into temporary directory. The static/etc files are only meant to be used as templates."
  - "Should be able to configure 'user' and 'group' to use for spawning php-fpm instances."
  - "Each php-fpm instance should be attached to the Node.js instance that spawned it, and therefore be destroyed if Node service stops."
  - "Use 'winston' module for all logging purposes."
  - "Capture all output generated by php-fpm and log."
  - "If module is installed globally, the 'serve-php' CLI command should start Express server using CWD as webRoot."
  - "When clustered, each Worker instance of 'serve-php' should spawn it's own php-fpm instances, the php-fpm instances should be shared with other workers in cluster."
  - "When used via 'serve-php' CLI command clustering should be automatic and https://github.com/rlidwka/pm2 should be used to manage."
  - "If a spawned php-fpm instance stops/crashes, it should be re-spawned automatically, and error should be logged."
  - "When being used as middleware, should be aware of parent application's server listening state. If a server closes, the php-fpm instances should be shut down instead of holding up the instance."
  - "Should emit 'ready' event when php-fpm has fully-started and can process requests. "
      
Methods:
  - "prototype.router() - A getter method which is used in the parent Express application to determine where in stack PHP will be served."
  - "prototype.handle() - Necessary to 'trick' Express into mounting our module by making it appear as an Express application."
  - "prototype.teardown() - Triggered on errors and uncaught exceptions. Attempts to properly remove/kill any related processes."
  - "prototype.updateRewrites() - Should traverse through webRoot paths looking for .htaccess files. Once found, use to generate mod-rewrite routes."
  - "prototype.serveStatic() - Handles delivery of non-PHP files that are located in the webRoot. These files should be served by Node since php-fpm will ignore them."